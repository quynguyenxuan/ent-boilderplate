schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60
) on QUERY

input AdminLoginInput {
  email: String!
  password: String!
}

input CreatePaymentIntentInput {
  paymentAmount: Float!
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

type JWT {
  email: String!
  name: String!
  refreshToken: String!
  token: String!
}

input LoginInput {
  email: String!
  password: String!
}

type PaymentIntentClientSecret {
  clientSecret: String!
}

input RefreshTokenInput {
  refreshToken: String!
}

type RefreshTokenJWT {
  token: String!
}

input SignupInput {
  email: String!
  name: String!
  password: String!
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

scalar jsonb

"""
Boolean expression to compare columns of type "jsonb". All fields are combined with logical 'AND'.
"""
input jsonb_comparison_exp {
  """is the column contained in the given json value"""
  _contained_in: jsonb

  """does the column contain the given json value at the top level"""
  _contains: jsonb
  _eq: jsonb
  _gt: jsonb
  _gte: jsonb

  """does the string exist as a top-level key in the column"""
  _has_key: String

  """do all of these strings exist as top-level keys in the column"""
  _has_keys_all: [String!]

  """do any of these strings exist as top-level keys in the column"""
  _has_keys_any: [String!]
  _in: [jsonb!]
  _is_null: Boolean
  _lt: jsonb
  _lte: jsonb
  _neq: jsonb
  _nin: [jsonb!]
}

"""mutation root"""
type mutation_root {
  createPaymentIntent(params: CreatePaymentIntentInput!): PaymentIntentClientSecret
  login(params: LoginInput!): JWT
  signup(params: SignupInput!): JWT
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "product"
"""
type product {
  brand: String

  """An object relationship"""
  category: product_category_enum!
  category_display_name: String!
  created_at: timestamptz!
  description: String
  id: Int!
  image_urls(
    """JSON select path"""
    path: String
  ): jsonb
  name: String!
  price: numeric!

  """An array relationship"""
  product_reviews(
    """distinct select on columns"""
    distinct_on: [product_review_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_review_order_by!]

    """filter the rows returned"""
    where: product_review_bool_exp
  ): [product_review!]!
  updated_at: timestamptz!
}

"""
order by aggregate values of table "product"
"""
input product_aggregate_order_by {
  avg: product_avg_order_by
  count: order_by
  max: product_max_order_by
  min: product_min_order_by
  stddev: product_stddev_order_by
  stddev_pop: product_stddev_pop_order_by
  stddev_samp: product_stddev_samp_order_by
  sum: product_sum_order_by
  var_pop: product_var_pop_order_by
  var_samp: product_var_samp_order_by
  variance: product_variance_order_by
}

"""
order by avg() on columns of table "product"
"""
input product_avg_order_by {
  id: order_by
  price: order_by
}

"""
Boolean expression to filter rows from the table "product". All fields are combined with a logical 'AND'.
"""
input product_bool_exp {
  _and: [product_bool_exp!]
  _not: product_bool_exp
  _or: [product_bool_exp!]
  brand: String_comparison_exp
  category: product_category_enum_bool_exp
  category_display_name: String_comparison_exp
  created_at: timestamptz_comparison_exp
  description: String_comparison_exp
  id: Int_comparison_exp
  image_urls: jsonb_comparison_exp
  name: String_comparison_exp
  price: numeric_comparison_exp
  product_reviews: product_review_bool_exp
  updated_at: timestamptz_comparison_exp
}

"""
columns and relationships of "product_category_enum"
"""
type product_category_enum {
  display_name: String!
  name: String!

  """An array relationship"""
  products(
    """distinct select on columns"""
    distinct_on: [product_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_order_by!]

    """filter the rows returned"""
    where: product_bool_exp
  ): [product!]!
}

"""
Boolean expression to filter rows from the table "product_category_enum". All fields are combined with a logical 'AND'.
"""
input product_category_enum_bool_exp {
  _and: [product_category_enum_bool_exp!]
  _not: product_category_enum_bool_exp
  _or: [product_category_enum_bool_exp!]
  display_name: String_comparison_exp
  name: String_comparison_exp
  products: product_bool_exp
}

"""Ordering options when selecting data from "product_category_enum"."""
input product_category_enum_order_by {
  display_name: order_by
  name: order_by
  products_aggregate: product_aggregate_order_by
}

"""
select columns of table "product_category_enum"
"""
enum product_category_enum_select_column {
  """column name"""
  display_name

  """column name"""
  name
}

"""
order by max() on columns of table "product"
"""
input product_max_order_by {
  brand: order_by
  category_display_name: order_by
  created_at: order_by
  description: order_by
  id: order_by
  name: order_by
  price: order_by
  updated_at: order_by
}

"""
order by min() on columns of table "product"
"""
input product_min_order_by {
  brand: order_by
  category_display_name: order_by
  created_at: order_by
  description: order_by
  id: order_by
  name: order_by
  price: order_by
  updated_at: order_by
}

"""Ordering options when selecting data from "product"."""
input product_order_by {
  brand: order_by
  category: product_category_enum_order_by
  category_display_name: order_by
  created_at: order_by
  description: order_by
  id: order_by
  image_urls: order_by
  name: order_by
  price: order_by
  product_reviews_aggregate: product_review_aggregate_order_by
  updated_at: order_by
}

"""
A review for a product which a customer has purchased before


columns and relationships of "product_review"

"""
type product_review {
  comment: String!
  created_at: timestamptz!
  id: Int!

  """An object relationship"""
  product: product!
  product_id: Int!
  rating: Int!
  updated_at: timestamptz!
  user_id: Int!
}

"""
order by aggregate values of table "product_review"
"""
input product_review_aggregate_order_by {
  avg: product_review_avg_order_by
  count: order_by
  max: product_review_max_order_by
  min: product_review_min_order_by
  stddev: product_review_stddev_order_by
  stddev_pop: product_review_stddev_pop_order_by
  stddev_samp: product_review_stddev_samp_order_by
  sum: product_review_sum_order_by
  var_pop: product_review_var_pop_order_by
  var_samp: product_review_var_samp_order_by
  variance: product_review_variance_order_by
}

"""
order by avg() on columns of table "product_review"
"""
input product_review_avg_order_by {
  id: order_by
  product_id: order_by
  rating: order_by
  user_id: order_by
}

"""
Boolean expression to filter rows from the table "product_review". All fields are combined with a logical 'AND'.
"""
input product_review_bool_exp {
  _and: [product_review_bool_exp!]
  _not: product_review_bool_exp
  _or: [product_review_bool_exp!]
  comment: String_comparison_exp
  created_at: timestamptz_comparison_exp
  id: Int_comparison_exp
  product: product_bool_exp
  product_id: Int_comparison_exp
  rating: Int_comparison_exp
  updated_at: timestamptz_comparison_exp
  user_id: Int_comparison_exp
}

"""
order by max() on columns of table "product_review"
"""
input product_review_max_order_by {
  comment: order_by
  created_at: order_by
  id: order_by
  product_id: order_by
  rating: order_by
  updated_at: order_by
  user_id: order_by
}

"""
order by min() on columns of table "product_review"
"""
input product_review_min_order_by {
  comment: order_by
  created_at: order_by
  id: order_by
  product_id: order_by
  rating: order_by
  updated_at: order_by
  user_id: order_by
}

"""Ordering options when selecting data from "product_review"."""
input product_review_order_by {
  comment: order_by
  created_at: order_by
  id: order_by
  product: product_order_by
  product_id: order_by
  rating: order_by
  updated_at: order_by
  user_id: order_by
}

"""
select columns of table "product_review"
"""
enum product_review_select_column {
  """column name"""
  comment

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  product_id

  """column name"""
  rating

  """column name"""
  updated_at

  """column name"""
  user_id
}

"""
order by stddev() on columns of table "product_review"
"""
input product_review_stddev_order_by {
  id: order_by
  product_id: order_by
  rating: order_by
  user_id: order_by
}

"""
order by stddev_pop() on columns of table "product_review"
"""
input product_review_stddev_pop_order_by {
  id: order_by
  product_id: order_by
  rating: order_by
  user_id: order_by
}

"""
order by stddev_samp() on columns of table "product_review"
"""
input product_review_stddev_samp_order_by {
  id: order_by
  product_id: order_by
  rating: order_by
  user_id: order_by
}

"""
order by sum() on columns of table "product_review"
"""
input product_review_sum_order_by {
  id: order_by
  product_id: order_by
  rating: order_by
  user_id: order_by
}

"""
order by var_pop() on columns of table "product_review"
"""
input product_review_var_pop_order_by {
  id: order_by
  product_id: order_by
  rating: order_by
  user_id: order_by
}

"""
order by var_samp() on columns of table "product_review"
"""
input product_review_var_samp_order_by {
  id: order_by
  product_id: order_by
  rating: order_by
  user_id: order_by
}

"""
order by variance() on columns of table "product_review"
"""
input product_review_variance_order_by {
  id: order_by
  product_id: order_by
  rating: order_by
  user_id: order_by
}

"""
select columns of table "product"
"""
enum product_select_column {
  """column name"""
  brand

  """column name"""
  category_display_name

  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  id

  """column name"""
  image_urls

  """column name"""
  name

  """column name"""
  price

  """column name"""
  updated_at
}

"""
order by stddev() on columns of table "product"
"""
input product_stddev_order_by {
  id: order_by
  price: order_by
}

"""
order by stddev_pop() on columns of table "product"
"""
input product_stddev_pop_order_by {
  id: order_by
  price: order_by
}

"""
order by stddev_samp() on columns of table "product"
"""
input product_stddev_samp_order_by {
  id: order_by
  price: order_by
}

"""
order by sum() on columns of table "product"
"""
input product_sum_order_by {
  id: order_by
  price: order_by
}

"""
order by var_pop() on columns of table "product"
"""
input product_var_pop_order_by {
  id: order_by
  price: order_by
}

"""
order by var_samp() on columns of table "product"
"""
input product_var_samp_order_by {
  id: order_by
  price: order_by
}

"""
order by variance() on columns of table "product"
"""
input product_variance_order_by {
  id: order_by
  price: order_by
}

type query_root {
  adminLogin(params: AdminLoginInput!): JWT

  """
  fetch data from the table: "product"
  """
  product(
    """distinct select on columns"""
    distinct_on: [product_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_order_by!]

    """filter the rows returned"""
    where: product_bool_exp
  ): [product!]!

  """fetch data from the table: "product" using primary key columns"""
  product_by_pk(id: Int!): product

  """
  fetch data from the table: "product_category_enum"
  """
  product_category_enum(
    """distinct select on columns"""
    distinct_on: [product_category_enum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_category_enum_order_by!]

    """filter the rows returned"""
    where: product_category_enum_bool_exp
  ): [product_category_enum!]!

  """
  fetch data from the table: "product_category_enum" using primary key columns
  """
  product_category_enum_by_pk(name: String!): product_category_enum

  """
  fetch data from the table: "product_review"
  """
  product_review(
    """distinct select on columns"""
    distinct_on: [product_review_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_review_order_by!]

    """filter the rows returned"""
    where: product_review_bool_exp
  ): [product_review!]!

  """fetch data from the table: "product_review" using primary key columns"""
  product_review_by_pk(id: Int!): product_review
  refreshToken(params: RefreshTokenInput!): RefreshTokenJWT
}

type subscription_root {
  """
  fetch data from the table: "product"
  """
  product(
    """distinct select on columns"""
    distinct_on: [product_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_order_by!]

    """filter the rows returned"""
    where: product_bool_exp
  ): [product!]!

  """fetch data from the table: "product" using primary key columns"""
  product_by_pk(id: Int!): product

  """
  fetch data from the table: "product_category_enum"
  """
  product_category_enum(
    """distinct select on columns"""
    distinct_on: [product_category_enum_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_category_enum_order_by!]

    """filter the rows returned"""
    where: product_category_enum_bool_exp
  ): [product_category_enum!]!

  """
  fetch data from the table: "product_category_enum" using primary key columns
  """
  product_category_enum_by_pk(name: String!): product_category_enum

  """
  fetch data from the table: "product_review"
  """
  product_review(
    """distinct select on columns"""
    distinct_on: [product_review_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [product_review_order_by!]

    """filter the rows returned"""
    where: product_review_bool_exp
  ): [product_review!]!

  """fetch data from the table: "product_review" using primary key columns"""
  product_review_by_pk(id: Int!): product_review
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

