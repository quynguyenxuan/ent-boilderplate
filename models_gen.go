// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package todo

import (
	"fmt"
	"io"
	"strconv"

	"entgo.io/quynguyen-todo/ent/todo"
)

type ProductCategory struct {
	ID   int    `json:"id"`
	Text string `json:"text"`
}

func (ProductCategory) IsNode() {}

type ProductInput struct {
	Status     ProductStatus `json:"status"`
	Priority   *int          `json:"priority"`
	Text       string        `json:"text"`
	Parent     *int          `json:"parent"`
	CategoryID *int          `json:"category_id"`
}

type TodoInput struct {
	Status     todo.Status `json:"status"`
	Priority   *int        `json:"priority"`
	Text       string      `json:"text"`
	Parent     *int        `json:"parent"`
	CategoryID *int        `json:"category_id"`
}

type ProductStatus string

const (
	ProductStatusDraft   ProductStatus = "DRAFT"
	ProductStatusActived ProductStatus = "ACTIVED"
)

var AllProductStatus = []ProductStatus{
	ProductStatusDraft,
	ProductStatusActived,
}

func (e ProductStatus) IsValid() bool {
	switch e {
	case ProductStatusDraft, ProductStatusActived:
		return true
	}
	return false
}

func (e ProductStatus) String() string {
	return string(e)
}

func (e *ProductStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductStatus", str)
	}
	return nil
}

func (e ProductStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
