enum ProductStatus {
  DRAFT
  ACTIVED
}

type Product implements Node {
  id: ID!
  createdAt: Time
  status: ProductStatus!
  priority: Int!
  text: String!
  parent: Product
  children: [Product!]
  category: ProductCategory
}

type ProductCategory implements Node {
  id: ID!
  text: String!
}

input ProductInput {
  status: ProductStatus! = IN_PROGRESS
  priority: Int
  text: String!
  parent: ID
  category_id: ID
}

type ProductConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [ProductEdge]
}

type ProductEdge {
  node: Product
  cursor: Cursor!
}



enum ProductOrderField {
  CREATED_AT
  PRIORITY
  STATUS
  TEXT
}

input ProductOrder {
  direction: OrderDirection!
  field: ProductOrderField
}

type ProductQuery {
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  products(after: Cursor, first: Int, before: Cursor, last: Int, orderBy: ProductOrder): ProductConnection
}

# , where: ProductWhereInput

type ProductMutation {
  createProduct(Product: ProductInput!): Product!
  clearProducts: Int!
}