// Copyright 2019-present Facebook
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package http

import (
	"net/http"
	"strconv"

	"github.com/gofiber/fiber/v2"
	"github.com/valyala/fasthttp/fasthttpadaptor"
	"go.uber.org/zap"
)

// @Summary Fetches Category
// @Description Fetches Category
// @ID Fetches Category
// @Tags [Category]
// @Accept  json
// @Produce  json
// @Success 200 {array} ent.Category
// @Failure 400 {object} main.HTTPError
// @Failure 404 {object} main.HTTPError
// @Failure 500 {object} main.HTTPError
// @Router /category [get]
// Read fetches the ent.Category identified by a given url-parameter from the
// database and returns it to the client.
func (h *CategoryHandler) List(c *fiber.Ctx) error {
	l := h.log.With(zap.String("method", "List"))
	q := h.client.Category.Query()
	var r http.Request
	fasthttpadaptor.ConvertRequest(c.Context(), &r, true)
	var err error
	page := 1
	if d := c.Query("page"); d != "" {
		page, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
			return c.Status(400).SendString("page must be an integer greater zero")
		}
	}
	itemsPerPage := 30
	if d := c.Query("itemsPerPage"); d != "" {
		itemsPerPage, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
			return c.Status(400).SendString("itemsPerPage must be an integer greater zero")
		}
	}
	es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
	if err != nil {
		l.Error("error fetching categories from db", zap.Error(err))
		return c.Status(fiber.StatusInternalServerError).SendString("Serve Error")
	}
	l.Info("categories rendered", zap.Int("amount", len(es)))
	return c.JSON(NewCategory656363463Views(es))
}

// @Summary Fetches Product
// @Description Fetches Product
// @ID Fetches Product
// @Tags [Product]
// @Accept  json
// @Produce  json
// @Success 200 {array} ent.Product
// @Failure 400 {object} main.HTTPError
// @Failure 404 {object} main.HTTPError
// @Failure 500 {object} main.HTTPError
// @Router /product [get]
// Read fetches the ent.Product identified by a given url-parameter from the
// database and returns it to the client.
func (h *ProductHandler) List(c *fiber.Ctx) error {
	l := h.log.With(zap.String("method", "List"))
	q := h.client.Product.Query()
	var r http.Request
	fasthttpadaptor.ConvertRequest(c.Context(), &r, true)
	var err error
	page := 1
	if d := c.Query("page"); d != "" {
		page, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
			return c.Status(400).SendString("page must be an integer greater zero")
		}
	}
	itemsPerPage := 30
	if d := c.Query("itemsPerPage"); d != "" {
		itemsPerPage, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
			return c.Status(400).SendString("itemsPerPage must be an integer greater zero")
		}
	}
	es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
	if err != nil {
		l.Error("error fetching products from db", zap.Error(err))
		return c.Status(fiber.StatusInternalServerError).SendString("Serve Error")
	}
	l.Info("products rendered", zap.Int("amount", len(es)))
	return c.JSON(NewProduct1899176864Views(es))
}

// @Summary Fetches Todo
// @Description Fetches Todo
// @ID Fetches Todo
// @Tags [Todo]
// @Accept  json
// @Produce  json
// @Success 200 {array} ent.Todo
// @Failure 400 {object} main.HTTPError
// @Failure 404 {object} main.HTTPError
// @Failure 500 {object} main.HTTPError
// @Router /todo [get]
// Read fetches the ent.Todo identified by a given url-parameter from the
// database and returns it to the client.
func (h *TodoHandler) List(c *fiber.Ctx) error {
	l := h.log.With(zap.String("method", "List"))
	q := h.client.Todo.Query()
	var r http.Request
	fasthttpadaptor.ConvertRequest(c.Context(), &r, true)
	var err error
	page := 1
	if d := c.Query("page"); d != "" {
		page, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
			return c.Status(400).SendString("page must be an integer greater zero")
		}
	}
	itemsPerPage := 30
	if d := c.Query("itemsPerPage"); d != "" {
		itemsPerPage, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
			return c.Status(400).SendString("itemsPerPage must be an integer greater zero")
		}
	}
	es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
	if err != nil {
		l.Error("error fetching todos from db", zap.Error(err))
		return c.Status(fiber.StatusInternalServerError).SendString("Serve Error")
	}
	l.Info("todos rendered", zap.Int("amount", len(es)))
	return c.JSON(NewTodo2548332322Views(es))
}

// @Summary Fetches VerySecret
// @Description Fetches VerySecret
// @ID Fetches VerySecret
// @Tags [VerySecret]
// @Accept  json
// @Produce  json
// @Success 200 {array} ent.VerySecret
// @Failure 400 {object} main.HTTPError
// @Failure 404 {object} main.HTTPError
// @Failure 500 {object} main.HTTPError
// @Router /verysecret [get]
// Read fetches the ent.VerySecret identified by a given url-parameter from the
// database and returns it to the client.
func (h *VerySecretHandler) List(c *fiber.Ctx) error {
	l := h.log.With(zap.String("method", "List"))
	q := h.client.VerySecret.Query()
	var r http.Request
	fasthttpadaptor.ConvertRequest(c.Context(), &r, true)
	var err error
	page := 1
	if d := c.Query("page"); d != "" {
		page, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
			return c.Status(400).SendString("page must be an integer greater zero")
		}
	}
	itemsPerPage := 30
	if d := c.Query("itemsPerPage"); d != "" {
		itemsPerPage, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
			return c.Status(400).SendString("itemsPerPage must be an integer greater zero")
		}
	}
	es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
	if err != nil {
		l.Error("error fetching very-secrets from db", zap.Error(err))
		return c.Status(fiber.StatusInternalServerError).SendString("Serve Error")
	}
	l.Info("very-secrets rendered", zap.Int("amount", len(es)))
	return c.JSON(NewVerySecret1653553545Views(es))
}
